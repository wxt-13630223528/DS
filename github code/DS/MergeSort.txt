 public static void merge(int[] array,int start,int mid,int end){
        int[] temArray = new int[array.length];
        int tmpIndex = start;
        int i = start;
        int s2 = mid+1;
        //当有两个归并段的时候
        while (start<=mid && s2 <=end){
            if(array[start]<array[s2]){
                temArray[tmpIndex++] = array[start++];

            }else {
                temArray[tmpIndex++] = array[s2++];
            }
        }
        //第一个归并段有数据
        while (start<=mid){
            temArray[tmpIndex++] = array[start++];
        }
        //第二个归并段有数据
        while (s2<=end){
            temArray[tmpIndex++] = array[s2++];
        }
        //把排好序的数据从tmpArray里面拷贝到array中
        while (i<=end){
            array[i] = temArray[i++];
        }
    }
    // 归并
    public static void mergeSort(int[] array,int start,int end){
        if(start>=end){
            return;
        }
        int mid = (start+end)/2;
        mergeSort(array,start,mid);
        mergeSort(array,mid+1,end);
        merge(array,start,mid,end);
    }

    //非递归归并
    public static void merge2(int[] array,int gap){
        int tmpArray[] = new int[array.length];
        int i = 0; //tmpArray的下标
        int start1 = 0;
        int end1 = start1+gap;
        int start2 = end1+1;
        int end2 = start2+gap-1 <=array.length-1?start2+gap-1:array.length-1;
        //保证有两个归并段
        while (start2<array.length){
            //两个归并段都有数据
            while (start1 <= end1 && start2<=end2 ){
                //比较
                if(array[start1]<=array[start2]){
                    tmpArray[i++] = array[start1++];
                }else {
                    tmpArray[i++] = array[start2++];
                }
            }
           while (start1 <= end1){
                tmpArray[i++] = array[start1++];
            }
            while (start2 <= end2){
                tmpArray[i++] = array[start2++];
            }
            //证明一次二路归并已经完成
            start1 = end2 +1;
            end1 = start1+gap-1;
            start2 = end1+1;
            end2 = start2+gap-1 <=array.length-1?start2+gap-1:array.length-1;
        }
        while (start1 < array.length){
            tmpArray[i++] = array[start1++];
        }
        //拷贝数据到 原始数数组
        for(int j = 0;j<tmpArray.length;j++){
            array[j]= tmpArray[j];
        }
    }

    public static void mergeSort2(int[] array){
        for(int i = 1;i<array.length;i*=2){
            merge2(array,i);
        }

    }