输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。
例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。
/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int preindex = 0;
    public TreeNode build(int[] pre, int[] in,int inbegin,int inend){
        //当前树根本没有左子树，或者右子树
        if(inbegin>inend){
            return null;
        }
        //根据前序遍历确定根节点
        TreeNode root = new TreeNode(pre[preindex]); //1 作为根节点
        //在中序遍历里找到根节点的下标
        int rootIndex = indexOfIn(in,pre[preindex],inbegin,inend); 
        preindex++;
        root.left = build(pre,in,inbegin,rootIndex-1);
        root.right = build(pre,in,rootIndex+1,inend);
        return root;
    }
    public int indexOfIn(int[] in,int val,int inbegin,int inend){
        for(int i = inbegin ;i<=inend;i++){
            if(in[i]==val){
                return i;
            }
        }
        return -1;
    }
    public TreeNode reConstructBinaryTree(int [] pre,int [] in) {
        if(pre.length==0 || in.length==0){
            return null;
        }
        
        return build(pre,in,0,in.length-1);
        
    }
}